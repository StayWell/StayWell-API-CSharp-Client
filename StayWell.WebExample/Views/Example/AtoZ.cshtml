@{
    ViewBag.Title = "A-Z";
}
<div class="section-header">
    <h1>A-Z</h1>
</div>
<div>
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active"><a href="#diseases-and-conditions" aria-controls="diseases-and-conditions" role="tab" data-toggle="tab" data-buckets="diseases-and-conditions">Diseases and Conditions</a></li>
        <li role="presentation"><a href="#tests-and-procedures" aria-controls="tests-and-procedures" role="tab" data-toggle="tab" data-buckets="tests-and-procedures">Tests and Procedures</a></li>
        <li role="presentation"><a href="#drugs-and-supplements" aria-controls="drugs-and-supplements" role="tab" data-toggle="tab" data-buckets="alchemy-patient-education-sheets">Drugs and Supplements</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="diseases-and-conditions">
            <div class="atoz"></div>
            <a class="clickable-link view-all-items hidden-initial">View all Diseases and Conditions</a>
            @*Find: <input type="text" />*@
        </div>
        <div role="tabpanel" class="tab-pane" id="tests-and-procedures">
            <div class="atoz"></div>
            <a class="clickable-link view-all-items hidden-initial">View all Tests and Procedures</a>
            @*Find: <input type="text" />*@
        </div>
        <div role="tabpanel" class="tab-pane" id="drugs-and-supplements">
            <div class="atoz"></div>
            <a class="clickable-link view-all-items hidden-initial">View all Drugs and Supplements</a>
            @*Find: <input type="text" />*@
        </div>
    </div>
    <!-- /Tabbed View Version -->
</div>
<br />
<div id="diseases-and-conditions-results" class="section-listing">
    <span class="loading-indicator hidden-initial"><img src='/Images/ajax-loader-indicator-lite.gif' alt='Loading' title='Loading' /> Loading...</span>
</div>
<div id="tests-and-procedures-results" class="section-listing">
    <span class="loading-indicator hidden-initial"><img src='/Images/ajax-loader-indicator-lite.gif' alt='Loading' title='Loading' /> Loading...</span>
</div>
<div id="drugs-and-supplements-results" class="section-listing">
    <span class="loading-indicator hidden-initial"><img src='/Images/ajax-loader-indicator-lite.gif' alt='Loading' title='Loading' /> Loading...</span>
</div>
<span id="InfiniteLoadingResults" class="loading-indicator hidden-initial"><img src='/Images/ajax-loader-horizontal-lite.gif' alt='Loading' title='Loading' /> Loading...</span>

@section scripts {
    <script type="text/javascript">
        var _alphabet = "#ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
        var _subCharacters = "1234567890".split("");
        var ITEM_REQUEST_BATCH_COUNT = 100;
        var DEFAULT_TOP = 100;
        var _requestId = 0;

        $(document).ready(function () {
            //Load the Active Tab
            var activeTabId = $(".tab-pane.active").attr("id");

            //Initialize A-Z For Each Tab
            var tabs = $(".tab-pane");
            for (var i = 0; i < tabs.length; i++) {
                DisplayAtoZ($(tabs[i]).attr("id"));
            }

            //Initialize Event Monitoring
            InitializeTabChangeEvent();
            InitializeViewAllClick();

            $("#" + activeTabId + "-results .loading-indicator").show();
            InitializeListing(activeTabId);
        });

        function InitializeTabChangeEvent() {
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                ShowAllLoadedItems();
            });    
        }

        function ShowAllLoadedItems() {
            //Reset the data
            DisableInfiniteScroll();
            $(".active-letter").removeClass("active-letter");
            $(".section-listing").hide();
            $(".view-all-items").hide();

            //Activate the new tab
            var activeTabId = $(".tab-pane.active").attr("id");
            $("#" + activeTabId + "-results").show();

            InitalizeLoadedLetters(activeTabId);
                
            if (!IsAlreadyInitialized(activeTabId)) {
                $("#" + activeTabId + "-results .loading-indicator").show();
                InitializeListing(activeTabId);
            } else if (IsMoreLettersToLoad(activeTabId)) {
                EnableInfiniteScroll();
            }   //All done, nothing to do!
        }

        function DisplayAtoZ(activeTabId) {
            //Initialize A-Z Buttons
            var source = $("#a-to-z-template").html();
            var template = Handlebars.compile(source);

            var html = template(_alphabet);
            $(".atoz").html(html);

            //Initialize Clicking
            InitializeAtoZClick();

            //Initiatlize A-Z Placeholders
            source = $("#listing-placeholder-template").html();
            template = Handlebars.compile(source);

            html = template(_alphabet);
            $("#" + activeTabId +"-results").append(html);
        }

        function InitializeAtoZClick() {
            $(".atoz a").click(function (e) {
                DisableInfiniteScroll();
 
                var currentLetter = $(e.target).data("letter");
                var activeTabId = $(".tab-pane.active").attr("id");

                //Mark letter as active
                $(".active-letter").removeClass("active-letter");
                $(e.target).addClass("active-letter");

                //Show view all link
                $(".tab-pane.active .view-all-items").show();

                //Hide the general loading indicator incase it is still showing.
                $("#" + activeTabId + "-results .loading-indicator").hide();

                //Hide all letters under the active tab and then display only the letter that we want.
                $("#" + activeTabId + "-results .letter-listing").hide();

                var letter = $("#" + activeTabId + "-results [data-letter='" + currentLetter + "']");
                if (letter.data("isloaded") == true) {
                    letter.show();
                } else {

                    //Loading Template
                    var source = $("#loading-template").html();
                    var template = Handlebars.compile(source);
                    letter.html(template());
                    letter.show();

                    _requestId++;
                    var requestState = {
                        TotaltemCount: 0,
                        CurrentLetter: currentLetter,
                        Buckets: $("[aria-controls='" + activeTabId + "']").data("buckets"),
                        ActiveTabId: activeTabId,
                        RequestId: _requestId
                    };
                    
                    GetListByLetter(requestState, DisplayIndividualLetter)
                }
                
            });
        }

        function InitializeViewAllClick() {
            $(".view-all-items").click(function (e) {
                ShowAllLoadedItems();
            });
        }

        function DisplayIndividualLetter(requestState, letterResults) {
            DisplayLetter(requestState, letterResults);
        }

        function InitalizeLoadedLetters(activeTabId) {
            //Hide all letters currently showing.  We want to show all letters from # - Z in order.
            //The order is important because if someone loaded Z, by direclty clicking Z, we don't want to
            //show A, B, C and Z.
            $("#" + activeTabId + "-results .letter-listing").hide();
            ShowLoadedLetters(activeTabId);
        }

        function ShowLoadedLetters(activeTabId) {
            //Hide all letters currently showing.  We want to show all letters from # - Z in order.
            //The order is important because if someone loaded Z, by direclty clicking Z, we don't want to
            //show A, B, C and Z.
            var letters = $("#" + activeTabId + "-results .letter-listing");

            //Iterate over all letter and display letters that are loaded with content.  Stop
            //as soon as you get to a unloaded letter.
            for (var i = 0; i < letters.length; i++) {

                //If the data is loaded display it.  Otherwise stop everything.
                if ($(letters[i]).attr("data-isloaded") == "true") {

                    //Only show if there are items to show in the letter.  Otherwise skip it.
                    if ($(letters[i]).find(".listing li a").length > 0) {
                        $(letters[i]).show();
                    }
                } else return;
            }
        }

        function InitializeListing(activeTabId) {
            var requestState = GetInitialRequest(activeTabId);
            ShowTopOfList(requestState);
        }

        function ShowTopOfList(requestState, letterResults) {
            var activeTabId = requestState.ActiveTabId;
            var requestId = requestState.RequestId;

            //Show results if present
            if (letterResults != undefined && letterResults != null) {
                DisplayLetter(requestState, letterResults);
                if (letterResults.length > 0) $("#" + activeTabId + "-results .loading-indicator").hide();

                //Show all letters that may have already been loaded in between if we are still
                //on the current active request.
                if(requestState.RequestId == _requestId) ShowLoadedLetters(activeTabId);

                //Update the requeststate
                requestState.TotaltemCount += letterResults.length;
                requestState = GetUdpatedRequest(requestState);
            }

            //If more content needs to load initially load more data.
            if (requestState != null) {

                //Mark the letter as loaded right away otherwise switching the tabs quickly
                //can kick off a bunch of uneeded web service requests.
                var letter = $("#" + activeTabId + "-results [data-letter='" + requestState.CurrentLetter + "']");
                letter.attr("data-isloaded", "true");

                //Start the load
                GetListByLetter(requestState, ShowTopOfList);
            }
            else {
                $("#InfiniteLoadingResults").hide();
                if (IsMoreLettersToLoad(activeTabId) && requestId == _requestId) EnableInfiniteScroll();
            }

        }

        function GetInitialRequest(activeTabId) {
            //Get the next letter to load
            var letter = GetNextUnloadedLetter(activeTabId);

            //Initialize the start of the load
            if (letter == null) requestState = null;
            else {
                _requestId++;
                requestState = {
                    TotaltemCount: 0,
                    CurrentLetter: letter,
                    Buckets: $("[aria-controls='" + activeTabId + "']").data("buckets"),
                    ActiveTabId: activeTabId,
                    RequestId: _requestId
                };
            }

            return requestState;
        }

        function GetUdpatedRequest(requestState) {
            //Get the next letter to load
            var letter = GetNextUnloadedLetter(requestState.ActiveTabId);
            
            if (letter == null) {
                //Nothing left to load
                requestState = null;
            } else if (requestState.TotaltemCount < ITEM_REQUEST_BATCH_COUNT) {
                //Update the existing request
                requestState.CurrentLetter = letter;
            } else {
                //Nothing left to rquest at this time.
                requestState = null;
            }

            return requestState;
        }

        function IsAlreadyInitialized(activeTabId) {
            if (GetNextUnloadedLetter(activeTabId) == _alphabet[0]) return false;
            else return true;
        }

        function IsMoreLettersToLoad(activeTabId) {
            if (GetNextUnloadedLetter(activeTabId) != null) return true;
            else return false;
        }

        function GetNextUnloadedLetter(activeTabId) {
            var unloadedLetters = $("#" + activeTabId + "-results span[data-isloaded='false']");

            if (unloadedLetters == null && unloadedLetters.length > 0) return null;
            else return $(unloadedLetters[0]).data("letter");
        }

        //function ShowNextLoadedHiddenLetters(activeTabId) {

        //}

        function GetListByLetter(requestState, onSuccess) {
            GetEntireList(requestState, 0, [], onSuccess);
        }

        function GetEntireList(requestState, skip, items, onSuccess) {
            if (items == undefined || items == null) items = [];

            if (requestState.CurrentLetter == "#") {
                GetEntireSpecialCharacterList(requestState, 0, skip, items, onSuccess);
                return;
            }

            $.ajax({
                type: "GET",
                url: "/api/contentsearch/" + requestState.CurrentLetter + "/" + requestState.Buckets +"/" + DEFAULT_TOP + "/" + skip,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {

                    //Combine the paged items
                    items = items.concat(msg.Items);

                    if (items.length < msg.Total) {
                        skip += DEFAULT_TOP;
                        GetEntireList(requestState, skip, items, onSuccess);
                    }
                    else onSuccess(requestState, items);
                },
                error: function (request, status, error) {
                    console.log(error);
                }
            });
        }

        function GetEntireSpecialCharacterList(requestState, subCharacterIndex, skip, items, onSuccess) {
            var letter = _subCharacters[subCharacterIndex];

            $.ajax({
                type: "GET",
                url: "/api/contentsearch/" + letter + "/" + requestState.Buckets + "/" + DEFAULT_TOP + "/" + skip,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {

                    //Combine the paged items
                    items = items.concat(msg.Items);
                    console.log(msg);

                    if (items.length < msg.Total) {
                        skip += DEFAULT_TOP;
                        GetEntireSpecialCharacterList(requestState, subCharacterIndex, skip, items, onSuccess);
                    }
                    else if (subCharacterIndex < _subCharacters.length-1) {
                        subCharacterIndex++;
                        GetEntireSpecialCharacterList(requestState, subCharacterIndex, 0, items, onSuccess);
                    } else onSuccess(requestState, items);
                },
                error: function (request, status, error) {
                    console.log(error);
                }
            });
        }

        //function DisplayLetter(activeTabId, letter, items) {
        function DisplayLetter(requestState, items) {
            items.sort(CompareTitle);
            var results = { Letter: requestState.CurrentLetter, Items: items }

            var source = $("#letter-template").html();
            var template = Handlebars.compile(source);

            var html = template(results);

            var letter = $("#" + requestState.ActiveTabId + "-results [data-letter='" + requestState.CurrentLetter + "']");
            letter.html(html);
            letter.attr("data-isloaded", "true");

            //Only display the results if the requestID equals the current job ID.
            //Otherwise something else happened more recently that should be displayed.
            console.log(requestState.CurrentLetter + " - " + requestState.RequestId + " - " + _requestId);
            if (requestState.RequestId == _requestId) {
                console.log(requestState.CurrentLetter + " - " + requestState.RequestId + " - " + _requestId);
                if (items.length > 0) letter.show();
            }
        }

        function CompareTitle(a, b) {
            if (a.Title < b.Title)
                return -1;
            if (a.Title > b.Title)
                return 1;
            return 0;
        }

        function EnableInfiniteScroll() {
            $(window).scroll(function () {
                if ($(window).scrollTop() == $(document).height() - $(window).height()) {
                    DisableInfiniteScroll();

                    $("#InfiniteLoadingResults").show();
                    var activeTabId = $(".tab-pane.active").attr("id");
                    InitializeListing(activeTabId);
                }
            });
        }

        function DisableInfiniteScroll() {
            $(window).unbind('scroll');
        }

    </script>

    <script id="a-to-z-template" type="text/x-handlebars-template">
        <ul>
            {{#each this}}
            <li><a class="clickable-link" data-letter="{{this}}">{{this}}</a></li>
            {{/each}}
        </ul>
    </script>

    <script id="listing-placeholder-template" type="text/x-handlebars-template">
        {{#each this}}
        <span data-letter="{{this}}" data-isloaded="false" class="hidden-initial letter-listing">{{this}}</span>
        {{/each}}
    </script>

    <script id="letter-template" type="text/x-handlebars-template">
        <ul>
            <li>
                <span class="letter">{{Letter}}</span>
                <ul class="listing">
                    {{#each Items}}
                    <li><a href="/Content/{{Bucket.Slug}}/{{Slug}}">{{Title}}</a></li>
                    {{else}}
                    <li>No content to display.</li>
                    {{/each}}
                </ul>
            </li>
        </ul>
    </script>

<script id="loading-template" type="text/x-handlebars-template">
    <span class="loading-indicator"><img src='/Images/ajax-loader-indicator-lite.gif' alt='Loading' title='Loading' /> Loading...</span>
</script>
}